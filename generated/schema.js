// This file is generated by Allograph. We recommend that you do not modify its contents.

import { Trainer as TrainerClass } from '../schema/models/trainer'
import { Pokemon as PokemonClass } from '../schema/models/pokemon'
import { Pokemon } from './type_definitions'

import { Trainer } from '../schema/custom_type_definitions'

import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

var knex = require('../database/connection'),
    jwt = require('jsonwebtoken');

const queryFields = {
      trainers: {
        type: new GraphQLList(Trainer),
        args: {
          id: {
            type: GraphQLString
          },
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.trainers(args);
        }
      },
      pokemons: {
        type: new GraphQLList(Pokemon),
        args: {
          id: {
            type: GraphQLString
          },
          url: {
            type: GraphQLString
          },
          name: {
            type: GraphQLString
          },
          trainerId: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.pokemons(args);
        }
      },
    };

const mutationFields = {
      addTrainer: {
        type: Trainer,
        args: {
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.createTrainer(args);
        }
      },
      updateTrainer: {
        type: Trainer,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.updateTrainer(args);
        }
      },
      addPokemon: {
        type: Pokemon,
        args: {
          url: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          trainerId: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.createPokemon(args);
        }
      },
      updatePokemon: {
        type: Pokemon,
        args: {
          id: {
            type: GraphQLString
          },
          url: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          trainerId: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.updatePokemon(args);
        }
      }
    };

module.exports = {
  queryFields,
  mutationFields
};