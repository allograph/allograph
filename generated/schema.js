// This file is generated by Allograph. We recommend that you do not modify its contents.

import { User as UserClass } from '../schema/models/user'
import { Project as ProjectClass } from '../schema/models/project'
import { Users_project as Users_projectClass } from '../schema/models/users_project'
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

var knex = require('../database/connection');
var jwt = require('jsonwebtoken');

const User = new GraphQLObjectType({
  name: 'User',
  description: 'This is a table called users',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (user, args, context) {
          return user.id;
        }
      },
      first_name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (user, args, context) {
          return user.first_name;
        }
      },
      last_name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (user, args, context) {
          return user.last_name;
        }
      },
      email: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (user, args, context) {
          return user.email;
        }
      },
      projects: {
        type: new GraphQLList(Project),
        resolve (user, args, context) {
          return knex('projects').where({ user_id: user.id });
        }
      },
      users_projects: {
        type: new GraphQLList(Users_project),
        resolve (user, args, context) {
          return knex('users_projects').where({ users_id: user.id });
        }
      },
    };
  }
});

const Project = new GraphQLObjectType({
  name: 'Project',
  description: 'This is a table called projects',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (project, args, context) {
          return project.id;
        }
      },
      title: {
        type: GraphQLString,
        resolve (project, args, context) {
          return project.title;
        }
      },
      user_id: {
        type: GraphQLInt,
        resolve (project, args, context) {
          return project.user_id;
        }
      },
      user: {
        type: User,
        resolve (project, args, context) {
          return knex('users').where({ id: project.user_id }).first();
        }
      },
      users_projects: {
        type: new GraphQLList(Users_project),
        resolve (project, args, context) {
          return knex('users_projects').where({ projects_id: project.id });
        }
      },
    };
  }
});

const Users_project = new GraphQLObjectType({
  name: 'Users_project',
  description: 'This is a table called users_projects',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (users_project, args, context) {
          return users_project.id;
        }
      },
      users_id: {
        type: GraphQLInt,
        resolve (users_project, args, context) {
          return users_project.users_id;
        }
      },
      projects_id: {
        type: GraphQLInt,
        resolve (users_project, args, context) {
          return users_project.projects_id;
        }
      },
      user: {
        type: User,
        resolve (users_project, args, context) {
          return knex('users').where({ id: users_project.users_id }).first();
        }
      },
      project: {
        type: Project,
        resolve (users_project, args, context) {
          return knex('projects').where({ id: users_project.projects_id }).first();
        }
      },
    };
  }
});

const Query = new GraphQLObjectType({
  name: 'Query',
  description: 'Root query object',
  fields: () => {
    return {
      usersProjects: {
          type: new GraphQLList(Project),
          args: {
          id: {
            type: GraphQLInt
          },
        },
        resolve(root, args, context) {
          var user = new UserClass();
          console.log('Request made $$$$$$$$$$');
          return user.userProjects(args);
        }
      },
      users: {
        type: new GraphQLList(User),
        args: {
          id: {
            type: GraphQLInt
          },
          first_name: {
            type: GraphQLString
          },
          last_name: {
            type: GraphQLString
          },
          email: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.users(args);
        }
      },
      projects: {
        type: new GraphQLList(Project),
        args: {
          id: {
            type: GraphQLInt
          },
          title: {
            type: GraphQLString
          },
          user_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.projects(args);
        }
      },
      users_projects: {
        type: new GraphQLList(Users_project),
        args: {
          id: {
            type: GraphQLInt
          },
          users_id: {
            type: GraphQLInt
          },
          projects_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var users_project = new Users_projectClass()
          return users_project.users_projects(args);
        }
      },
    };
  }
});

const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Functions to set stuff',
  fields () {
    return {
      addUser: {
        type: User,
        args: {
          first_name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          last_name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.createUser(args);
        }
      },
      updateUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          first_name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          last_name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.updateUser(args);
        }
      },
      deleteUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.deleteUser(args);
        }
      },
      addProject: {
        type: Project,
        args: {
          title: {
            type: GraphQLString
          },
          user_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.createProject(args);
        }
      },
      updateProject: {
        type: Project,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          title: {
            type: GraphQLString
          },
          user_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.updateProject(args);
        }
      },
      deleteProject: {
        type: Project,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.deleteProject(args);
        }
      },
      addUsers_project: {
        type: Users_project,
        args: {
          users_id: {
            type: GraphQLInt
          },
          projects_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var users_project = new Users_projectClass()
          return users_project.createUsers_project(args);
        }
      },
      updateUsers_project: {
        type: Users_project,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          users_id: {
            type: GraphQLInt
          },
          projects_id: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var users_project = new Users_projectClass()
          return users_project.updateUsers_project(args);
        }
      },
      deleteUsers_project: {
        type: Users_project,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var users_project = new Users_projectClass()
          return users_project.deleteUsers_project(args);
        }
      }
    };
  }
});

exports.Schema = new GraphQLSchema({
  query: Query,
  mutation: Mutation
});