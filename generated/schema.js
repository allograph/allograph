// This file is generated by Allograph. We recommend that you do not modify its contents.

import { User as UserClass } from '../schema/models/user'
import { Post as PostClass } from '../schema/models/post'
import { Comment as CommentClass } from '../schema/models/comment'
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

var knex = require('../database/connection'),
    jwt = require('jsonwebtoken');

const User = new GraphQLObjectType({
  name: 'User',
  description: 'This is a table called users',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (user, args, context) {
          return user.id;
        }
      },
      firstName: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (user, args, context) {
          return user.firstName;
        }
      },
      lastName: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (user, args, context) {
          return user.lastName;
        }
      },
      email: {
        type: GraphQLString,
        resolve (user, args, context) {
          return user.email;
        }
      },
      password: {
        type: GraphQLString,
        resolve (user, args, context) {
          return user.password;
        }
      },
      comments: {
        type: new GraphQLList(Comment),
        resolve (user, args, context) {
          return knex('comments').where({ userId: user.id });
        }
      },
      posts: {
        type: new GraphQLList(Post),
        resolve (user, args, context) {
          return knex('posts').where({ userId: user.id });
        }
      },
    };
  }
});

const Post = new GraphQLObjectType({
  name: 'Post',
  description: 'This is a table called posts',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (post, args, context) {
          return post.id;
        }
      },
      title: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (post, args, context) {
          return post.title;
        }
      },
      content: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (post, args, context) {
          return post.content;
        }
      },
      userId: {
        type: GraphQLInt,
        resolve (post, args, context) {
          return post.userId;
        }
      },
      user: {
        type: User,
        resolve (post, args, context) {
          return knex('users').where({ id: post.userId }).first();
        }
      },
      comments: {
        type: new GraphQLList(Comment),
        resolve (post, args, context) {
          return knex('comments').where({ postId: post.id });
        }
      },
    };
  }
});

const Comment = new GraphQLObjectType({
  name: 'Comment',
  description: 'This is a table called comments',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLInt),
        resolve (comment, args, context) {
          return comment.id;
        }
      },
      content: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (comment, args, context) {
          return comment.content;
        }
      },
      userId: {
        type: GraphQLInt,
        resolve (comment, args, context) {
          return comment.userId;
        }
      },
      postId: {
        type: GraphQLInt,
        resolve (comment, args, context) {
          return comment.postId;
        }
      },
      user: {
        type: User,
        resolve (comment, args, context) {
          return knex('users').where({ id: comment.userId }).first();
        }
      },
      post: {
        type: Post,
        resolve (comment, args, context) {
          return knex('posts').where({ id: comment.postId }).first();
        }
      },
    };
  }
});

const Query = new GraphQLObjectType({
  name: 'Query',
  description: 'Root query object',
  fields: () => {
    return {
      users: {
        type: new GraphQLList(User),
        args: {
          id: {
            type: GraphQLInt
          },
          firstName: {
            type: GraphQLString
          },
          lastName: {
            type: GraphQLString
          },
          email: {
            type: GraphQLString
          },
          password: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.users(args);
        }
      },
      posts: {
        type: new GraphQLList(Post),
        args: {
          id: {
            type: GraphQLInt
          },
          title: {
            type: GraphQLString
          },
          content: {
            type: GraphQLString
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var post = new PostClass()
          return post.posts(args);
        }
      },
      comments: {
        type: new GraphQLList(Comment),
        args: {
          id: {
            type: GraphQLInt
          },
          content: {
            type: GraphQLString
          },
          userId: {
            type: GraphQLInt
          },
          postId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var comment = new CommentClass()
          return comment.comments(args);
        }
      },
    };
  }
});

const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Functions to set stuff',
  fields () {
    return {
      login: {
        type: GraphQLString,
        args: {
          email: {
            type: new GraphQLNonNull(GraphQLString)
          },
          password: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass();
          return user.users(args).then(user => {
            return jwt.sign({ user: user[0] }, 'allograph-secret' );
          });
        }
      },
      addUser: {
        type: User,
        args: {
          firstName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          lastName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: GraphQLString
          },
          password: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.createUser(args);
        }
      },
      updateUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          firstName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          lastName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: GraphQLString
          },
          password: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.updateUser(args);
        }
      },
      deleteUser: {
        type: GraphQLString,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.deleteUser(args);
        }
      },
      addPost: {
        type: Post,
        args: {
          title: {
            type: new GraphQLNonNull(GraphQLString)
          },
          content: {
            type: new GraphQLNonNull(GraphQLString)
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var post = new PostClass()
          return post.createPost(args);
        }
      },
      updatePost: {
        type: Post,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          title: {
            type: new GraphQLNonNull(GraphQLString)
          },
          content: {
            type: new GraphQLNonNull(GraphQLString)
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var post = new PostClass()
          return post.updatePost(args);
        }
      },
      deletePost: {
        type: GraphQLString,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var post = new PostClass()
          return post.deletePost(args);
        }
      },
      addComment: {
        type: Comment,
        args: {
          content: {
            type: new GraphQLNonNull(GraphQLString)
          },
          userId: {
            type: GraphQLInt
          },
          postId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var comment = new CommentClass()
          return comment.createComment(args);
        }
      },
      updateComment: {
        type: Comment,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          content: {
            type: new GraphQLNonNull(GraphQLString)
          },
          userId: {
            type: GraphQLInt
          },
          postId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var comment = new CommentClass()
          return comment.updateComment(args);
        }
      },
      deleteComment: {
        type: GraphQLString,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var comment = new CommentClass()
          return comment.deleteComment(args);
        }
      }
    };
  }
});

exports.Schema = new GraphQLSchema({
  query: Query,
  mutation: Mutation
});