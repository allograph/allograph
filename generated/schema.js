// This file is generated by Allograph. We recommend that you do not modify its contents.

import { User as UserClass } from '../schema/models/user'
import { User } from './type_definitions'

import { Trainer } from '../schema/custom_type_definitions'

import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

import {maskErrors, UserError} from 'graphql-errors';

var knex = require('../database/connection'),
    jwt = require('jsonwebtoken');

const queryFields = {
      Trainer: {
          type: Trainer,
          args: {
          name: {
            type: GraphQLString
          },
        },
        resolve(root, args, context) {
          return knex('trainers').where({ name: args.name }).first();
        }
      },
      Pokemon: {
          type: Pokemon,
          args: {
          id: {
            type: GraphQLString
          },
        },
        resolve(root, args, context) {
          return knex('pokemons').where({ id: args.id }).first();
        }
      },
      users: {
        type: new GraphQLList(User),
        args: {
          id: {
            type: GraphQLInt
          },
          enabled: {
            type: GraphQLBoolean
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.users(args);
        }
      },
    };

const mutationFields = {
      addUser: {
        type: User,
        args: {
          enabled: {
            type: GraphQLBoolean
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.createUser(args);
        }
      },
      updateUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          enabled: {
            type: GraphQLBoolean
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.updateUser(args);
        }
      },
      deleteUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.deleteUser(args);
        }
      }
    };

module.exports = {
  queryFields,
  mutationFields
};