// This file is generated by Allograph. We recommend that you do not modify its contents.

import { User as UserClass } from '../schema/models/user'
import { Tag as TagClass } from '../schema/models/tag'
import { TagsProject as TagsProjectClass } from '../schema/models/tags_project'
import { Project as ProjectClass } from '../schema/models/project'
import { UsersProject as UsersProjectClass } from '../schema/models/users_project'
import { User, Tag, TagsProject, Project, UsersProject } from './type_definitions'

import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

var knex = require('../database/connection'),
    jwt = require('jsonwebtoken');

const queryFields = {
      users: {
        type: new GraphQLList(User),
        args: {
          id: {
            type: GraphQLInt
          },
          firstName: {
            type: GraphQLString
          },
          lastName: {
            type: GraphQLString
          },
          email: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.users(args);
        }
      },
      tags: {
        type: new GraphQLList(Tag),
        args: {
          id: {
            type: GraphQLInt
          },
          title: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var tag = new TagClass()
          return tag.tags(args);
        }
      },
      tagsProjects: {
        type: new GraphQLList(TagsProject),
        args: {
          id: {
            type: GraphQLInt
          },
          projectId: {
            type: GraphQLInt
          },
          tagId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var tagsProject = new TagsProjectClass()
          return tagsProject.tagsProjects(args);
        }
      },
      projects: {
        type: new GraphQLList(Project),
        args: {
          id: {
            type: GraphQLInt
          },
          title: {
            type: GraphQLString
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.projects(args);
        }
      },
      usersProjects: {
        type: new GraphQLList(UsersProject),
        args: {
          id: {
            type: GraphQLInt
          },
          usersId: {
            type: GraphQLInt
          },
          projectsId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var usersProject = new UsersProjectClass()
          return usersProject.usersProjects(args);
        }
      },
    };

const mutationFields = {
      addUser: {
        type: User,
        args: {
          firstName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          lastName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.createUser(args);
        }
      },
      updateUser: {
        type: User,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          firstName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          lastName: {
            type: new GraphQLNonNull(GraphQLString)
          },
          email: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var user = new UserClass()
          return user.updateUser(args);
        }
      },
      addTag: {
        type: Tag,
        args: {
          title: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var tag = new TagClass()
          return tag.createTag(args);
        }
      },
      updateTag: {
        type: Tag,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          title: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var tag = new TagClass()
          return tag.updateTag(args);
        }
      },
      addTagsProject: {
        type: TagsProject,
        args: {
          projectId: {
            type: GraphQLInt
          },
          tagId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var tagsProject = new TagsProjectClass()
          return tagsProject.createTagsProject(args);
        }
      },
      updateTagsProject: {
        type: TagsProject,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          projectId: {
            type: GraphQLInt
          },
          tagId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var tagsProject = new TagsProjectClass()
          return tagsProject.updateTagsProject(args);
        }
      },
      addProject: {
        type: Project,
        args: {
          title: {
            type: GraphQLString
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.createProject(args);
        }
      },
      updateProject: {
        type: Project,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          title: {
            type: GraphQLString
          },
          userId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var project = new ProjectClass()
          return project.updateProject(args);
        }
      },
      addUsersProject: {
        type: UsersProject,
        args: {
          usersId: {
            type: GraphQLInt
          },
          projectsId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var usersProject = new UsersProjectClass()
          return usersProject.createUsersProject(args);
        }
      },
      updateUsersProject: {
        type: UsersProject,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLInt)
          },
          usersId: {
            type: GraphQLInt
          },
          projectsId: {
            type: GraphQLInt
          }
        },
        resolve (root, args, context) {
          var usersProject = new UsersProjectClass()
          return usersProject.updateUsersProject(args);
        }
      }
    };

module.exports = {
  queryFields,
  mutationFields
};