// This file is generated by Allograph. We recommend that you do not modify its contents.

import { Trainer as TrainerClass } from '../schema/models/trainer'
import { Pokemon as PokemonClass } from '../schema/models/pokemon'
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLBoolean,
  GraphQLNonNull
} from 'graphql';

var knex = require('../database/connection');
var jwt = require('jsonwebtoken');

const Trainer = new GraphQLObjectType({
  name: 'Trainer',
  description: 'This is a table called trainers',
  fields: () => {
    return {
      id: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (trainer, args, context) {
          return trainer.id;
        }
      },
      name: {
        type: GraphQLString,
        resolve (trainer, args, context) {
          return trainer.name;
        }
      },
      pokemons: {
        type: new GraphQLList(Pokemon),
        resolve (trainer, args, context) {
          return knex('pokemons').where({ trainer_id: trainer.id }).then(pokemons => {;
            return pokemons;
          });
        }
      },
    };
  }
});

const Pokemon = new GraphQLObjectType({
  name: 'Pokemon',
  description: 'This is a table called pokemons',
  fields: () => {
    return {
      id: {
        type: GraphQLString,
        resolve (pokemon, args, context) {
          return pokemon.id;
        }
      },
      url: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (pokemon, args, context) {
          return pokemon.url;
        }
      },
      name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve (pokemon, args, context) {
          return pokemon.name;
        }
      },
      trainer_id: {
        type: GraphQLString,
        resolve (pokemon, args, context) {
          return pokemon.trainer_id;
        }
      },
      trainers: {
        type: Trainer,
        resolve (pokemon, args, context) {
          return knex('trainers').where({ id: pokemon.trainer_id }).then(trainers => {;
            return trainers[0];
          });
        }
      },
    };
  }
});

const Query = new GraphQLObjectType({
  name: 'Query',
  description: 'Root query object',
  fields: () => {
    return {
      trainers: {
        type: new GraphQLList(Trainer),
        args: {
          id: {
            type: GraphQLString
          },
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.trainers(args);
        }
      },
      pokemons: {
        type: new GraphQLList(Pokemon),
        args: {
          id: {
            type: GraphQLString
          },
          url: {
            type: GraphQLString
          },
          name: {
            type: GraphQLString
          },
          trainer_id: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.pokemons(args);
        }
      },
    };
  }
});

const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Functions to set stuff',
  fields () {
    return {
      addTrainer: {
        type: Trainer,
        args: {
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.createTrainer(args);
        }
      },
      updateTrainer: {
        type: Trainer,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.updateTrainer(args);
        }
      },
      deleteTrainer: {
        type: GraphQLString,
        args: {
          id: {
            type: new GraphQLNonNull(GraphQLString)
          }
        },
        resolve (root, args, context) {
          var trainer = new TrainerClass()
          return trainer.deleteTrainer(args);
        }
      },
      addPokemon: {
        type: Pokemon,
        args: {
          url: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          trainer_id: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.createPokemon(args);
        }
      },
      updatePokemon: {
        type: Pokemon,
        args: {
          id: {
            type: GraphQLString
          },
          url: {
            type: new GraphQLNonNull(GraphQLString)
          },
          name: {
            type: new GraphQLNonNull(GraphQLString)
          },
          trainer_id: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.updatePokemon(args);
        }
      },
      deletePokemon: {
        type: GraphQLString,
        args: {
          id: {
            type: GraphQLString
          }
        },
        resolve (root, args, context) {
          var pokemon = new PokemonClass()
          return pokemon.deletePokemon(args);
        }
      }
    };
  }
});

exports.Schema = new GraphQLSchema({
  query: Query,
  mutation: Mutation
});